// Mocks generated by Mockito 5.4.6 from annotations
// in tickets_booking/test/providers/event_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:tickets_booking/models/event.dart' as _i5;
import 'package:tickets_booking/models/event_group.dart' as _i7;
import 'package:tickets_booking/models/search_filters.dart' as _i6;
import 'package:tickets_booking/services/ticketmaster_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TicketmasterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicketmasterService extends _i1.Mock
    implements _i2.TicketmasterService {
  MockTicketmasterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey =>
      (super.noSuchMethod(
            Invocation.getter(#apiKey),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
          )
          as String);

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  _i4.Future<List<_i5.Event>> fetchEvents({String? keyword = 'concert'}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchEvents, [], {#keyword: keyword}),
            returnValue: _i4.Future<List<_i5.Event>>.value(<_i5.Event>[]),
          )
          as _i4.Future<List<_i5.Event>>);

  @override
  _i4.Future<List<_i5.Event>> fetchEventsWithFilters({
    String? keyword,
    _i6.SearchFilters? filters,
    int? page = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchEventsWithFilters, [], {
              #keyword: keyword,
              #filters: filters,
              #page: page,
            }),
            returnValue: _i4.Future<List<_i5.Event>>.value(<_i5.Event>[]),
          )
          as _i4.Future<List<_i5.Event>>);

  @override
  _i4.Future<_i5.Event?> fetchEventById(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchEventById, [eventId]),
            returnValue: _i4.Future<_i5.Event?>.value(),
          )
          as _i4.Future<_i5.Event?>);

  @override
  List<_i7.EventGroup> groupEvents(List<_i5.Event>? raw) =>
      (super.noSuchMethod(
            Invocation.method(#groupEvents, [raw]),
            returnValue: <_i7.EventGroup>[],
          )
          as List<_i7.EventGroup>);
}
